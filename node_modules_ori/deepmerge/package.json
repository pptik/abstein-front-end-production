{
  "_args": [
    [
      {
        "raw": "deepmerge@^2.1.1",
        "scope": null,
        "escapedName": "deepmerge",
        "name": "deepmerge",
        "rawSpec": "^2.1.1",
        "spec": ">=2.1.1 <3.0.0",
        "type": "range"
      },
      "/Users/Ilham/Documents/Vidyanusa/VidyanusaEducationalClustering/front-end/node_modules/gulp-json-editor"
    ]
  ],
  "_from": "deepmerge@>=2.1.1 <3.0.0",
  "_id": "deepmerge@2.1.1",
  "_inCache": true,
  "_location": "/deepmerge",
  "_nodeVersion": "10.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/deepmerge_2.1.1_1527521181902_0.7506255634979491"
  },
  "_npmUser": {
    "name": "tehshrike",
    "email": "me@JoshDuff.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "deepmerge@^2.1.1",
    "scope": null,
    "escapedName": "deepmerge",
    "name": "deepmerge",
    "rawSpec": "^2.1.1",
    "spec": ">=2.1.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-json-editor"
  ],
  "_resolved": "http://registry.npmjs.org/deepmerge/-/deepmerge-2.1.1.tgz",
  "_shasum": "e862b4e45ea0555072bf51e7fd0d9845170ae768",
  "_shrinkwrap": null,
  "_spec": "deepmerge@^2.1.1",
  "_where": "/Users/Ilham/Documents/Vidyanusa/VidyanusaEducationalClustering/front-end/node_modules/gulp-json-editor",
  "author": {
    "name": "Nick Fisher"
  },
  "bugs": {
    "url": "https://github.com/KyleAMathews/deepmerge/issues"
  },
  "dependencies": {},
  "description": "A library for deep (recursive) merging of Javascript objects",
  "devDependencies": {
    "is-mergeable-object": "1.1.0",
    "is-plain-object": "^2.0.4",
    "jsmd": "0.3.1",
    "rollup": "0.49.3",
    "rollup-plugin-commonjs": "8.2.1",
    "rollup-plugin-node-resolve": "3.0.0",
    "tap": "~7.1.2",
    "uglify-js": "^3.3.12"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-urQxA1smbLZ2cBbXbaYObM1dJ82aJ2H57A1C/Kklfh/ZN1bgH4G/n5KWhdNfOK11W98gqZfyYj7W4frJJRwA2w==",
    "shasum": "e862b4e45ea0555072bf51e7fd0d9845170ae768",
    "tarball": "https://registry.npmjs.org/deepmerge/-/deepmerge-2.1.1.tgz",
    "fileCount": 9,
    "unpackedSize": 25281,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbDB+eCRA9TVsSAnZWagAAc7IP/2g5F44nfVLjqRqNvHmH\nckBWOWk/AHBZRwdZYI3zdS83oOIeBq2NWV/AugQZJIVb43VM1Yhftwaf+4ib\nfE4uWH9Dkoy18nNL4Fzo+yFsSE8R6DtLH99aTFp7xBx5mUS6IX/SnjwXrcZb\nt3BSsflZQQsdowaOkY0XbUblKqJYlnk/ltA1brX2FHsb7VfgZz/qrur34xzs\nE1ZCLIOwoEF3rlTcbm8jdJHsrs+gQuy/5UCMEsYlru87iRQuDw+osy2WoK74\nHn14Pyvc4LlgJzNDx2NLvtEFHRJkV4Q6t9mOXnzF2GpUM80TpolaJvSJI6LW\nxBcLGEl3QOf2ex+Gte+xBFUvGUMhZkTve2H8PByR1QoSslHSfdvBnFEzAmCr\n/FYU0HGwm+WJbPmgxlO1jq+b33YMLOlv5zFAOq5cKh5rK3vIZ8kj8jBdVyWv\nN9Jl3iePENUnA88yAT7VQWVVmZnJGi0JV6l+i7XoNkQ/+DhJ8kaqljrsQt+i\nlrzAieTcv4S4lAKB11JbDBkLDVGolq0L+L72G1ZabHjh2MnIXbd3NxJUbr5h\n+O+Vk3ku0guqQpqwubZ4amo4ojDgw4paIgLBZn2nq86z6qcbPDsR17CfuS89\nFI7gSFfzy8L52uhbbQUGYVjUxUgGmrOC65OmoA7x+q1M9YncdpbnKdRG8K7L\nzN+5\r\n=3m21\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "dfdb7239fff13385d44b5257f17a7423b8421678",
  "homepage": "https://github.com/KyleAMathews/deepmerge",
  "keywords": [
    "merge",
    "deep",
    "extend",
    "copy",
    "clone",
    "recursive"
  ],
  "license": "MIT",
  "main": "dist/umd.js",
  "maintainers": [
    {
      "name": "kylemathews",
      "email": "mathews.kyle@gmail.com"
    },
    {
      "name": "tehshrike",
      "email": "me@JoshDuff.com"
    }
  ],
  "module": "dist/es.js",
  "name": "deepmerge",
  "optionalDependencies": {},
  "readme": "# deepmerge\n\nMerges the enumerable attributes of two or more objects deeply.\n\n> UMD bundle is 567B minified+gzipped\n\n\n### Migration from 1.x to 2.0.0\n\n[***Check out the changes from version 1.x to 2.0.0***](https://github.com/KyleAMathews/deepmerge/blob/master/changelog.md#200)\n\nFor the legacy array element-merging algorithm, see [the `arrayMerge` option below](#arraymerge).\n\n\n### Webpack bug\n\nIf you have `require('deepmerge')` (as opposed to `import merge from 'deepmerge'`) anywhere in your codebase, Webpack 3 and 4 have a bug that [breaks bundling](https://github.com/webpack/webpack/issues/6584).\n\nIf you see `Error: merge is not a function`, add this alias to your Webpack config:\n\n```\nalias: {\n\tdeepmerge$: path.resolve(__dirname, 'node_modules/deepmerge/dist/umd.js'),\n}\n```\n\n\n## Getting Started\n\n### Example Usage\n<!--js\nvar merge = require('./')\n-->\n\n```js\nvar x = {\n\tfoo: { bar: 3 },\n\tarray: [{\n\t\tdoes: 'work',\n\t\ttoo: [ 1, 2, 3 ]\n\t}]\n}\n\nvar y = {\n\tfoo: { baz: 4 },\n\tquux: 5,\n\tarray: [{\n\t\tdoes: 'work',\n\t\ttoo: [ 4, 5, 6 ]\n\t}, {\n\t\treally: 'yes'\n\t}]\n}\n\nvar expected = {\n\tfoo: {\n\t\tbar: 3,\n\t\tbaz: 4\n\t},\n\tarray: [{\n\t\tdoes: 'work',\n\t\ttoo: [ 1, 2, 3 ]\n\t}, {\n\t\tdoes: 'work',\n\t\ttoo: [ 4, 5, 6 ]\n\t}, {\n\t\treally: 'yes'\n\t}],\n\tquux: 5\n}\n\nmerge(x, y) // => expected\n```\n\n\n### Installation\n\nWith [npm](http://npmjs.org) do:\n\n```sh\nnpm install deepmerge\n```\n\ndeepmerge can be used directly in the browser without the use of package managers/bundlers as well:  [UMD version from unpkg.com](https://unpkg.com/deepmerge/dist/umd.js).\n\n\n### Includes\n\nCommonJS:\n```\nvar merge = require('deepmerge')\n```\n\nES Modules:\n```\nimport merge from 'deepmerge'\n```\n\n\n# API\n\n\n## `merge(x, y, [options])`\n\nMerge two objects `x` and `y` deeply, returning a new merged object with the\nelements from both `x` and `y`.\n\nIf an element at the same key is present for both `x` and `y`, the value from\n`y` will appear in the result.\n\nMerging creates a new object, so that neither `x` or `y` is modified.\n\n\n## `merge.all(arrayOfObjects, [options])`\n\nMerges any number of objects into a single result object.\n\n```js\nvar x = { foo: { bar: 3 } }\nvar y = { foo: { baz: 4 } }\nvar z = { bar: 'yay!' }\n\nvar expected = { foo: { bar: 3, baz: 4 }, bar: 'yay!' }\n\nmerge.all([x, y, z]) // => expected\n```\n\n\n## Options\n\n### `arrayMerge`\ndeepmerge, by default, concatenates arrays and merges array values. \n\nThere are however nigh-infinite valid ways to merge arrays, and you may want to supply your own method. You can do this by passing an `arrayMerge` function as an option.\n\nThe options object will include the default `isMergeableObject` implementation if the top-level consumer didn't pass a custom function in.\n\n\n#### Examples\n\nExample of overwriting merge when merging arrays:\n\n```js\nconst overwriteMerge = (destinationArray, sourceArray, options) => sourceArray\nmerge(\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t{ arrayMerge: overwriteMerge }\n) // => [3, 2, 1]\n```\n\nExample of preventing arrays inside of objects from being merged:\n\n```js\nconst dontMerge = (destination, source) => source\nmerge(\n\t{ coolThing: [1, 2, 3] },\n\t{ coolThing: ['a', 'b', 'c'] },\n\t{ arrayMerge: dontMerge }\n) // => { coolThing: ['a', 'b', 'c'] }\n```\n\nTo use the legacy (pre-version-2.0.0) array merging algorithm, use the following:\n\n```js\nconst emptyTarget = value => Array.isArray(value) ? [] : {}\nconst clone = (value, options) => merge(emptyTarget(value), value, options)\n\nfunction legacyArrayMerge(target, source, options) {\n\tconst destination = target.slice()\n\n\tsource.forEach(function(e, i) {\n\t\tif (typeof destination[i] === 'undefined') {\n\t\t\tconst cloneRequested = options.clone !== false\n\t\t\tconst shouldClone = cloneRequested && options.isMergeableObject(e)\n\t\t\tdestination[i] = shouldClone ? clone(e, options) : e\n\t\t} else if (options.isMergeableObject(e)) {\n\t\t\tdestination[i] = merge(target[i], e, options)\n\t\t} else if (target.indexOf(e) === -1) {\n\t\t\tdestination.push(e)\n\t\t}\n\t})\n\treturn destination\n}\n\nmerge(\n\t[{ a: true }],\n\t[{ b: true }, 'ah yup'],\n\t{ arrayMerge: legacyArrayMerge }\n) // => [{ a: true, b: true }, 'ah yup']\n```\n\n\n### `isMergeableObject`\n\nBy default, deepmerge clones every property from almost every kind of object.\n\nYou may not want this, if your objects are of special types, and you want to copy the whole object instead of just copying its properties.\n\nYou can accomplish this by passing in a function for the `isMergeableObject` option.\n\nIf you only want to clone properties of plain objects, and ignore all \"special\" kinds of instantiated objects, you probably want to drop in [`is-plain-object`](https://github.com/jonschlinkert/is-plain-object).\n\n```js\nconst isPlainObject = require('is-plain-object')\n\nfunction SuperSpecial() {\n\tthis.special = 'oh yeah man totally'\n}\n\nconst instantiatedSpecialObject = new SuperSpecial()\n\nconst target = {\n\tsomeProperty: {\n\t\tcool: 'oh for sure'\n\t}\n}\n\nconst source = {\n\tsomeProperty: instantiatedSpecialObject\n}\n\nconst defaultOutput = merge(target, source)\n\ndefaultOutput.someProperty.cool // => 'oh for sure'\ndefaultOutput.someProperty.special // => 'oh yeah man totally'\ndefaultOutput.someProperty instanceof SuperSpecial // => false\n\nconst customMergeOutput = merge(target, source, {\n\tisMergeableObject: isPlainObject\n})\n\ncustomMergeOutput.someProperty.cool // => undefined\ncustomMergeOutput.someProperty.special // => 'oh yeah man totally'\ncustomMergeOutput.someProperty instanceof SuperSpecial // => true\n```\n\n\n### `clone`\n\n*Deprecated.*\n\nDefaults to `true`.\n\nIf `clone` is `false` then child objects will be copied directly instead of being cloned.  This was the default behavior before version 2.x.\n\n\n# Testing\n\nWith [npm](http://npmjs.org) do:\n\n```sh\nnpm test\n```\n\n\n# License\n\nMIT\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/KyleAMathews/deepmerge.git"
  },
  "scripts": {
    "build": "rollup -c",
    "size": "npm run build && uglifyjs --compress --mangle -- ./dist/umd.js | gzip -c | wc -c",
    "test": "npm run build && tap test/*.js && jsmd readme.md"
  },
  "version": "2.1.1"
}
