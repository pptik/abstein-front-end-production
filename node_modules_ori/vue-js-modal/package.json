{
  "_args": [
    [
      {
        "raw": "vue-js-modal@^1.3.16",
        "scope": null,
        "escapedName": "vue-js-modal",
        "name": "vue-js-modal",
        "rawSpec": "^1.3.16",
        "spec": ">=1.3.16 <2.0.0",
        "type": "range"
      },
      "/Users/Ilham/Documents/Vidyanusa/VidyanusaEducationalClustering/front-end"
    ]
  ],
  "_from": "vue-js-modal@>=1.3.16 <2.0.0",
  "_id": "vue-js-modal@1.3.16",
  "_inCache": true,
  "_location": "/vue-js-modal",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/vue-js-modal_1.3.16_1530543498725_0.3681454043656658"
  },
  "_npmUser": {
    "name": "euvl",
    "email": "yev.vlasenko@gmail.com"
  },
  "_npmVersion": "5.10.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vue-js-modal@^1.3.16",
    "scope": null,
    "escapedName": "vue-js-modal",
    "name": "vue-js-modal",
    "rawSpec": "^1.3.16",
    "spec": ">=1.3.16 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://registry.npmjs.org/vue-js-modal/-/vue-js-modal-1.3.16.tgz",
  "_shasum": "a61b01113c8f2e297c2b45dedeab9f00175a8a63",
  "_shrinkwrap": null,
  "_spec": "vue-js-modal@^1.3.16",
  "_where": "/Users/Ilham/Documents/Vidyanusa/VidyanusaEducationalClustering/front-end",
  "author": {
    "name": "euvl",
    "email": "yev.vlasenko@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/euvl/vue-js-modal/issues"
  },
  "dependencies": {},
  "description": "Modal Component for Vue.js",
  "devDependencies": {
    "babel-core": "^6.25.0",
    "babel-loader": "latest",
    "babel-preset-env": "^1.5.2",
    "chai": "^3.5.0",
    "cross-env": "^3.0.0",
    "css-loader": "^0.25.0",
    "eslint": "^3.19.0",
    "eslint-config-standard": "^6.2.1",
    "eslint-friendly-formatter": "^2.0.7",
    "eslint-loader": "^1.7.1",
    "eslint-plugin-html": "^2.0.0",
    "eslint-plugin-promise": "^3.4.0",
    "eslint-plugin-standard": "^2.0.1",
    "extract-text-webpack-plugin": "^2.1.2",
    "file-loader": "^0.9.0",
    "jasmine-core": "^2.7.0",
    "karma": "^1.4.1",
    "karma-chrome-launcher": "^2.2.0",
    "karma-coverage": "^1.1.1",
    "karma-mocha": "^1.3.0",
    "karma-phantomjs-launcher": "^1.0.4",
    "karma-phantomjs-shim": "^1.4.0",
    "karma-sinon-chai": "^1.3.1",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-spec-reporter": "0.0.31",
    "karma-webpack": "^2.0.2",
    "lolex": "^1.5.2",
    "mocha": "^3.2.0",
    "node-sass": "^4.5.0",
    "phantomjs-prebuilt": "^2.1.14",
    "sass-loader": "^5.0.1",
    "sinon": "^2.1.0",
    "sinon-chai": "^2.8.0",
    "uglifyjs-webpack-plugin": "^0.4.6",
    "vue": "^2.2.6",
    "vue-hot-reload-api": "^2.0.8",
    "vue-loader": "^10.0.0",
    "vue-style-loader": "^2.0.0",
    "vue-template-compiler": "^2.1.0",
    "webpack": "^2.2.0",
    "webpack-dev-server": "^2.2.0",
    "webpack-merge": "^4.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-35EkMMCuZFqTHpcODiQTp1IEpmawNoYLp9jvewTtFszd8QnXTNU4R/L+KPg+xIb7K1+/z/DWwahWPRdpryXxjA==",
    "shasum": "a61b01113c8f2e297c2b45dedeab9f00175a8a63",
    "tarball": "https://registry.npmjs.org/vue-js-modal/-/vue-js-modal-1.3.16.tgz",
    "fileCount": 32,
    "unpackedSize": 199675,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbOj2KCRA9TVsSAnZWagAAt6cP/inP1ySeyISE/NOWCEBH\nEn+KUCi8Zy65iVcuLyN3sg7pYJv8zTlDVGIrmlU23lUqUCOTVOQ26NoHcb+7\nTyFFsvOvNx6+NV+f6UeIIhe5XOXjovbPe/FhAed4Z9JY4ZFJHaEteTbcG8pE\ncs5YliZV/21BpILMZFoHUQrnPsYw/fIqPdZBbu0/8m5dmzT2Pg5LCcS93RZ9\nT5/0OwJnEEuaJMepJDJrvQzXBJnO1cHU0zdotVaOLfvTKBAS9vJPHQeL6GUq\n0ljsSzSO3sq/ALmEaoM1SPF6JB6jZAgtvLbFTYuMsN2Cl6Cv7gCe4PcL84x3\n/9l4zHyC+wJuYipjtN8Gb75ty7odMfVhA++4SiShPUgFhZ7UHC7PDskXc4pC\nPbzi2AugbH7fHO5v9jUa3o1EKOI1rhY3BDd8i8Yn80Kz9rBJtbt0wpLmZG20\nJdHWd0lIVKKZNEIbFo4j8pJZVEk+j+2MFC193rqKqyl4ZmcBin6qSo/9LHO9\nwKzkC2V+mUV1bBZwikQQymJQQH7OAkgjgcb9Xs5pNWvtTmHewAJY77wbVTiq\ngQUTb71tVeZEn3fLJ9aoRPOWCnPWUvkFoQDqmlYqSs8uLPascGi9P45j/nSb\nP9d4tzwGH1VXfCzFTXUpfzJgEAHs4J7GDMo+rPkIAa8WqQ69Q30vJDOKFO9a\nBQQy\r\n=V5SJ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "25f2b2526a84ac6e321f8df3ff1c1bde54652b30",
  "homepage": "https://github.com/euvl/vue-js-modal#readme",
  "keywords": [
    "front-end",
    "web",
    "vue",
    "vuejs",
    "dialog",
    "alert",
    "modal",
    "vue-js-modal"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "euvl",
      "email": "yev.vlasenko@gmail.com"
    }
  ],
  "name": "vue-js-modal",
  "optionalDependencies": {},
  "peerDependencies": {
    "vue": "^2.2.6"
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org"
  },
  "readme": "<p align=\"center\">\n\n# Vue.js modal\n\n[![npm version](https://badge.fury.io/js/vue-js-modal.svg)](https://badge.fury.io/js/vue-js-modal)\n[![npm](https://img.shields.io/npm/dm/vue-js-modal.svg)](https://www.npmjs.com/package/vue-js-modal)\n\n<p align=\"right\">\n  <a href=\"https://www.buymeacoffee.com/yev\" target=\"_blank\">\n  <img width=\"200\" alt=\"screen shot 2018-03-01 at 10 33 39\" src=\"https://user-images.githubusercontent.com/1577802/36840220-21beb89c-1d3c-11e8-98a4-45fc334842cf.png\">\n  </a>\n</p>\n\n##### Simple to use, highly customizable, mobile friendly Vue.js 2.0+ modal with SSR support. http://vue-js-modal.yev.io/\n\n[Changelog on Medium](https://medium.com/@yev_dev/vue-js-modal-changelog-61f934691b67 \"Medium\")\n\n</p>\n\n<p align=\"center\">\n  <img src=\"https://media.giphy.com/media/3oKIPco1eNxAA1rD4Q/giphy.gif\">\n</p>\n\nDemo: http://vue-js-modal.yev.io/\n\n### Install\n\n```bash\nnpm install vue-js-modal --save\n```\n\n### How to use\n\nInclude plugin in your `main.js` file.\n\n```javascript\nimport VModal from 'vue-js-modal'\n\nVue.use(VModal)\n\n/*\nBy default plugin will use \"modal\" name for the component.\nIf you need to change it, you can do so by providing \"componentName\" param.\n\nExample:\n\nVue.use(VModal, { componentName: \"foo-modal\" })\n...\n<foo-modal name=\"bar\"></foo-modal>\n*/\n```\n\nCreate modal:\n\n```vue\n<modal name=\"hello-world\">\n  hello, world!\n</modal>\n```\nCall it from anywhere in the app:\n\n```javascript\nmethods: {\n  show () {\n    this.$modal.show('hello-world');\n  },\n  hide () {\n    this.$modal.hide('hello-world');\n  }\n}\n```\n---\n\nYou can easily send data into the modal:\n\n```javascript\nthis.$modal.show('hello-world', { foo: 'bar' })\n```\n\nAnd receive it in `beforeOpen` event handler:\n\n```vue\n<modal name=\"hello-world\" @before-open=\"beforeOpen\"/>\n```\n```javascript\nmethods: {\n  beforeOpen (event) {\n    console.log(event.params.foo);\n  }\n}\n```\n\nIf you use **Bower** package manager - you will have to initialize library differently:\n\n```js\nVue.use(window[\"vue-js-modal\"].default);\n```\n\n### Dialog\n\nIt is a simplified version of the modal, which has most parameters set by default and is pretty useful for quick prototyping, showing alerts or creating mobile-like modals.\n\nTo start using `<v-dialog/>` you must set `dialog: true` in plugin configuration:\n\n```js\nVue.use(VModal, { dialog: true })\n```\n\nAnd include it in your project:\n\n```vue\n<v-dialog/>\n```\n\nCall it (all params except of “text” are optional):\n\n```javascript\nthis.$modal.show('dialog', {\n  title: 'Alert!',\n  text: 'You are too awesome',\n  buttons: [\n    {\n      title: 'Deal with it',\n      handler: () => { alert('Woot!') }\n    },\n    {\n      title: '',       // Button title\n      default: true,    // Will be triggered by default if 'Enter' pressed.\n      handler: () => {} // Button click handler\n    },\n    {\n      title: 'Close'\n    }\n ]\n})\n```\n\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/1577802/29165216-ec62552c-7db9-11e7-807e-ef341edcc94d.png\">\n</p>\n\n### Dynamic Modals\n\nIn order to instantiate modals at runtime (for lazy-loading or decluttering templates), it is possible to create modals dynamically.\n\nTo start using this feature you must set `dynamic: true` in plugin configuration:\n\n```js\nVue.use(VModal, { dynamic: true })\n```\n\nAnd include the `<modals-container/>` component it in your project:\n\n```vue\n<modals-container/>\n```\n\nAlternatively, the modals container can be automatically appended to the document body once the plugin is loaded using `injectModalsContainer: true`:\n\n```js\nVue.use(VModal, { dynamic: true, injectModalsContainer: true })\n```\n\nCall it (the first argument is the component definition, the second are component properties, the third modal parameters, and the fourth the modal event listeners):\n\n```javascript\nthis.$modal.show({\n  template: `\n    <div>\n      <h1>This is created inline</h1>\n      <p>{{ text }}</p>\n    </div>\n  `,\n  props: ['text']\n}, {\n  text: 'This text is passed as a property'\n}, {\n  height: 'auto'\n}, {\n  'before-close': (event) => { console.log('this will be called before the modal closes'); }\n})\n```\n\nIt can also be used with `.vue` files:\n\n```javascript\nimport MyComponent from './MyComponent.vue'\n\nthis.$modal.show(MyComponent, {\n  text: 'This text is passed as a property'\n}, {\n  draggable: true\n})\n```\n\nOther than defining the `name` modal parameter, it's also possible to close dynamic modals emitting a `'close'` event:\n\n```javascript\nthis.$modal.show({\n  template: `\n    <div>\n      <p>Close using this button:</p>\n      <button @click=\"$emit('close')\">Close</button>\n    </div>\n  `\n})\n```\n\nFor more examples please take a look at [vue-js-modal.yev.io](http://vue-js-modal.yev.io).\n\n**Note:** keep in mind that there are some limitations for using dynamic modals. If you need full functionality then use ordinary modal instead.\n\n### SSR\n\nInclude plugin in your `nuxt.config.js` file:\n\n```javascript\nmodule.exports = {\n  plugins: ['~plugins/vue-js-modal']\n}\n```\n\nAnd your `plugins/vue-js-modal.js` will look like:\n\n```javascript\nimport Vue from 'vue'\nimport VModal from 'vue-js-modal/dist/ssr.index'\n\nVue.use(VModal)\n```\n\nFor full demo please look at `demo/server_side_rendering`\n\n### Extracted CSS\n\nThere is also a ssr build with css file extracted. Take a look in /dist folder.\n\n### Properties\n\n| Name      | Required | Type          | Default     | Description |\n| ---       | ---      | ---           | ---         | ---         |\n| name      | true  | [String, Number] |             | Name of the modal |\n| delay     | false | Number           | 0           | Delay between showing overlay and actual modal box |\n| resizable | false | Boolean          | false       | If true, allows to resize modal window, keeping it in the center of the screen. |\n| adaptive  | false | Boolean          | false       | If true, modal box will try to adapt to the window size |\n| draggable | false | [Boolean, String]| false       | If true, modal box will be draggable. |\n| scrollable | false | Boolean         | false       | If `height` property is `auto` and the modal height exceeds window height - you will be able to scroll modal |\n| reset     | false | Boolean          | false       | Resets position and size before showing modal |\n| clickToClose | false | Boolean       | true        | If set to `false`, it will not be possible to close modal by clicking on the background |\n| transition| false | String           |             | Transition name |\n| classes   | false | [String, Array]  | 'v--modal'| Classes that will be applied to the actual modal box, if not specified, the default 'vue--modal' class will be applied |\n| width     | false | [String, Number] | 600         | Width in pixels or percents (e.g. 50 or \"50px\", \"50%\") |\n| height    | false | [String, Number] | 300         | Height in pixels or percents (e.g. 50 or \"50px\", \"50%\") or `\"auto\"` |\n| minWidth  | false | Number (px)      | 0           | The minimum width to which modal can be resized  |\n| minHeight | false | Number (px)      | 0           | The minimum height to which modal can be resized |\n| maxWidth  | false | Number (px)      | Infinity    | The maximum width of the modal (if the value is greater than window width, window width will be used instead |\n| maxHeight | false | Number (px)      | Infinity    | The maximum height of the modal (if the value is greater than window height, window height will be used instead |\n| pivotX    | false | Number (0 - 1.0) | 0.5         | Horizontal position in %, default is 0.5 (meaning that modal box will be in the middle (50% from left) of the window |\n| pivotY    | false | Number (0 - 1.0) | 0.5         | Vertical position in %, default is 0.5 (meaning that modal box will be in the middle (50% from top) of the window |\n\n### Events\n\n| Name         | Description |\n| ---          | --- |\n| before-open  | Emits while modal is still invisible, but was added to the DOM |\n| opened       | Emits after modal became visible or started transition |\n| before-close | Emits before modal is going to be closed. Can be stopped from the event listener calling `event.stop()` (example: you are creating a text editor, and want to stop closisng and ask user to correct mistakes if text is not valid)\n| closed       | Emits right before modal is destoyed |\n\nExample:\n```vue\n<template>\n  <modal name=\"example\"\n         :width=\"300\"\n         :height=\"300\"\n         @before-open=\"beforeOpen\"\n         @before-close=\"beforeClose\">\n    <b>{{time}}</b>\n  </modal>\n</template>\n<script>\nexport default {\n  name: 'ExampleModal',\n  data () {\n    return {\n      time: 0,\n      duration: 5000\n    }\n  },\n  methods: {\n    beforeOpen (event) {\n      console.log(event)\n      // Set the opening time of the modal\n      this.time = Date.now()\n    },\n    beforeClose (event) {\n      console.log(event)\n      // If modal was open less then 5000 ms - prevent closing it\n      if (this.time + this.duration < Date.now()) {\n        event.stop()\n      }\n    }\n  }\n}\n</script>\n```\n\nExample with a dynamic modal:\n```vue\nexport default {\n  name: 'ExampleModal',\n  data () {\n    return {\n      time: 0,\n      duration: 5000\n    }\n  },\n  methods: {\n    openModal () {\n      this.$modal.show({\n        template: `<b>{{time}}</b>`,\n        props: ['time']\n      }, {\n        time: this.time\n      }, {\n        width: 300,\n        height: 300\n      }, {\n        'before-open': this.beforeOpen,\n        'before-close': this.beforeClose\n      })\n    },\n    beforeOpen (event) {\n      console.log(event)\n      // Set the opening time of the modal\n      this.time = Date.now()\n    },\n    beforeClose (event) {\n      console.log(event)\n      // If modal was open less then 5000 ms - prevent closing it\n      if (this.time + this.duration < Date.now()) {\n        event.stop()\n      }\n    }\n  }\n}\n</script>\n```\n\nThis example, initializes `time` variable every time the modal is being opened.\nAnd then forbits closing it for the next 5000 ms\n\n### Other\n\n#### Height: \"auto\"\n\nFrom `v1.2.6` height can be set to \"auto\". If you want to be able to scroll modal in case it's height exceeds window height - you can set flag `scrollable=\"true\"`.\n\np.s. `scrollable` will only work with `height=\"auto\"`.\n\nExample:\n\n```vue\n<modal name=\"foo\" height=\"auto\" :scrollable=\"true\">...</modal>\n```\n\nAuto height:\n\n<p align=\"center\">\n  <img src=\"https://media.giphy.com/media/xUPGGpEV00RDDDeiuk/giphy.gif\">\n</p>\n\nScrollable content & auto height:\n\n<p align=\"center\">\n  <img src=\"https://media.giphy.com/media/xUn3CfwfH3ISuf4mxq/giphy.gif\">\n</p>\n\n\n#### Close button\n\nIf you want to have a Close (x) button in the top-right corner, you can use \"top-right\" slot for it. There is deliberately no predefined Close button style - you will have to implement/use your own button.\n\nExample:\n```vue\n<template>\n  <modal name=\"foo\">\n\n    <div slot=\"top-right\">\n      <button @click=\"$modal.hide('foo')\">\n        ❌\n      </button>\n    </div>\n\n    Hello, ☀️!\n\n  </modal>\n</template>\n```\n\n\n#### Draggable handler\n\nDraggable property can accept not only `Boolean` but also `String` paramenters. With `String` value, you can specify a CSS selector to the element which will be a \"handler\" for dragging.\n\nExample:\n\n```vue\n<modal name=\"bar\" draggable=\".window-header\">\n  <div class=\"window-header\">DRAG ME HERE</div>\n  <div>\n     Hello, 🌎!\n  </div>\n</modal>\n```\n\n#### Overlay background color\n\nIf you want to change overlay background color, you can easily do it using css.\n\nFor all modals:\n\n```css\n.v--modal-overlay {\n  background: red;\n}\n```\n\nFor specific modal:\n\n```css\n.v--modal-overlay[data-modal=\"my_modal_name\"] {\n  background: transparent;\n}\n```\n\n#### Fullscreen\n\n```vue\n<modal name=\"fs\" :adaptive=\"true\" width=\"100%\" height=\"100%\">\nDont forget about close button :)\n</modal>\n```\n\n### Check out\n\nCheck out my other projects:\n\n* https://github.com/euvl/vue-notification\n* https://github.com/euvl/vue-js-toggle-button\n* https://github.com/euvl/vue-js-popover\n* https://github.com/euvl/v-clipboard\n\n### Developers\n\nTo run an example:\n```sh\n# Clone repo\ngit clone https://github.com/euvl/vue-js-modal.git\n\n# Run unit tests\nnpm run unit\n\n# Run linter\nnpm run lint\n\n# Build main library for client & ssr\ncd vue-js-modal\nnpm install\nnpm run build\n\n# Build and run demo\ncd demo/client_side_rendering\nnpm install\nnpm run dev\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/euvl/vue-js-modal.git"
  },
  "scripts": {
    "build": "npm run build:client && npm run build:ssr && npm run build:ssr-no-css",
    "build:client": "webpack --config ./build/webpack.client.config.js --progress --hide-modules",
    "build:ssr": "webpack --config ./build/webpack.ssr.config.js --progress --hide-modules",
    "build:ssr-no-css": "webpack --config ./build/webpack.ssr-no-css.config.js --progress --hide-modules",
    "lint": "eslint --ext .js,.vue src test/unit/specs",
    "test:types": "tsc -p types/test",
    "unit": "./node_modules/karma/bin/karma start test/unit/karma.conf.js",
    "watch": "webpack --config ./build/webpack.client.config.js --progress --hide-modules --watch"
  },
  "types": "types/index.d.ts",
  "version": "1.3.16"
}
