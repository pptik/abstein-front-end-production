{
  "_args": [
    [
      {
        "raw": "tableexport",
        "scope": null,
        "escapedName": "tableexport",
        "name": "tableexport",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Ilham/Library/Mobile Documents/com~apple~CloudDocs/Documents/Vidyanusa/VidyanusaAnalisaAbsensi/FE"
    ]
  ],
  "_from": "tableexport@latest",
  "_id": "tableexport@5.0.2",
  "_inCache": true,
  "_location": "/tableexport",
  "_nodeVersion": "9.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/tableexport_5.0.2_1527207179055_0.14518488761176518"
  },
  "_npmUser": {
    "name": "clarketm",
    "email": "travis.m.clarke@gmail.com"
  },
  "_npmVersion": "5.8.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tableexport",
    "scope": null,
    "escapedName": "tableexport",
    "name": "tableexport",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "http://registry.npmjs.org/tableexport/-/tableexport-5.0.2.tgz",
  "_shasum": "a6646a6834d809eb1f32846f856af56f5045d0b9",
  "_shrinkwrap": null,
  "_spec": "tableexport",
  "_where": "/Users/Ilham/Library/Mobile Documents/com~apple~CloudDocs/Documents/Vidyanusa/VidyanusaAnalisaAbsensi/FE",
  "authors": [
    "clarketm <travis.m.clarke@gmail.com>"
  ],
  "bugs": {
    "url": "https://github.com/clarketm/TableExport/issues"
  },
  "dependencies": {
    "blobjs": "^1.1.1",
    "file-saverjs": "^1.3.6",
    "xlsx": "^0.9.13"
  },
  "description": "The simple, easy-to-implement library to export HTML tables to xlsx, xls, csv, and txt files",
  "devDependencies": {
    "del": "^2.2.0",
    "gulp": "^3.9.1",
    "gulp-bump": "^2.4.0",
    "gulp-clean-css": "^2.0.7",
    "gulp-rename": "^1.2.2",
    "gulp-replace": "^0.5.4",
    "gulp-uglify": "^1.5.3",
    "jasmine": "^2.4.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-xxj6Nz3s13SvgO8SzZydueUQnNg4B2FszNl7JVaK/bo14AEOmh15TIZinvXV3dhstRJeyhbidBL751pzV30uvQ==",
    "shasum": "a6646a6834d809eb1f32846f856af56f5045d0b9",
    "tarball": "https://registry.npmjs.org/tableexport/-/tableexport-5.0.2.tgz",
    "fileCount": 195,
    "unpackedSize": 8047319,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbB1UMCRA9TVsSAnZWagAAh0YQAJ71ORyJaXvOINJQXRq0\noIZwX5hLoGftZLZkA7U1+X4HbMH+BXU1gSp4eoBzIrYXDiGLb5pNP++glPxC\nHIMOLjD88GSBkgz/0//y4eNihi2Vy+SWEXcTvD3GltdzqyKFP6qSryENhwuf\nKfbtMpy0K4eTQOlxwlS8vB3/Ad2dT1OF5AmYiFiGiY4DIQZroOFtjHsLB4rZ\nzdXqMlrRHFkWVxizo9/pSsNOH8QUZrxP9I73T6PATIEfQJUWPflWPmG7EChS\n3flHIuEKl3j80oZ8JIZUAcWigp2KUPAIDGOMHYjbuxfSQuRNIE6voaB/Qv9q\nlMVspd82JP5v53nwnKEu/qFcWme7lzxLBrAHIOXHhGyBBUm8TXfXSoO15rZZ\ntei0vSpNA+zhv18beizjN7xfVIfeQJ83kpTRWV4KwsewELLPrXgPi3ECEA+Q\nkceYTKuX8600QZiOLTU5/Q6acYSv3mMYfl1W3jSdo7O3PWzS/jk5egPxdiDM\nhLFZ1pnOUhf4p8QEIdxzgwJ+ZbgGtEPAWsQyUbqFihkEeKaeXnZT2MK9SfJi\nneleXOoxsDW4z+7jsba/4k5x+w2AyoIDYrtFFzG/MYK78CAXL0magXwCSXqu\nO9KJljfyI+n+EBJUI5d2gAzx8gSrQL3i4VJX0GyI7KjNoEdZg+1MbV74Fs/d\n3nG+\r\n=wtK/\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "homepage": "https://tableexport.travismclarke.com/",
  "ignore": [
    "**/.*",
    "node_modules",
    "bower_components",
    "test",
    "tests"
  ],
  "keywords": [
    "tableexport",
    "table",
    "export",
    "Excel",
    "xlsx",
    "xls",
    "csv",
    "txt",
    "jquery-plugin",
    "ecosystem:jquery"
  ],
  "license": "Apache-2.0",
  "main": "dist/js/tableexport.js",
  "maintainers": [
    {
      "name": "clarketm",
      "email": "travis.m.clarke@gmail.com"
    }
  ],
  "name": "tableexport",
  "optionalDependencies": {},
  "peerDependencies": {
    "jquery": ">= 1.1.2",
    "bootstrap": ">= 3 < 4"
  },
  "readme": " [![TableExport](/Hero.png)](https://tableexport.travismclarke.com)\n<!-- # [TableExport](https://tableexport.travismclarke.com) -->\n<!-- The simple, easy-to-implement library to export HTML tables to `xlsx`, `xls`, `csv`, and `txt` files. -->\n\n[![GitHub release](https://img.shields.io/github/release/clarketm/tableexport.svg)]()\n[![Build Status](https://travis-ci.org/clarketm/TableExport.svg?branch=master)](https://travis-ci.org/clarketm/TableExport)\n[![Downloads](https://img.shields.io/npm/dt/tableexport.svg)]()\n[![License](https://img.shields.io/npm/l/tableexport.svg)]()\n\n## Docs\n* [Migrating from **3.x** to **4.x**?](MIGRATING_v3_to_v4.md)\n* [Migrating from **4.x** to **5.x**?](MIGRATING_v4_to_v5.md)\n* [`v3` docs](https://tableexport.v3.travismclarke.com/) and [README](https://github.com/clarketm/TableExport/tree/3.x.x#getting-started):\n* [`v4` docs](https://tableexport.travismclarke.com/READMEv4.html) and [README](https://github.com/clarketm/TableExport/tree/4.x.x#getting-started):\n* [`v5` docs](https://tableexport.travismclarke.com/) and [README](#getting-started) (below):\n\n## Getting Started\n\n### Install manually using `<script>` tags\nTo use this library, include the [FileSaver.js](https://github.com/clarketm/FileSaver.js/) library, and [TableExport](https://tableexport.travismclarke.com) library before the closing `<body>` tag of your HTML document:\n\n```html\n<script src=\"FileSaver.js\"></script>\n ...\n<script src=\"tableexport.js\"></script>\n```\n\n### Install with Bower\n\n```shell\n$ bower install tableexport.js\n```\n\n### Install with npm\n```shell\n$ npm install tableexport\n```\n\n### CDN\n#### [CDNjs](https://cdnjs.com/libraries/TableExport)\n|          | uncompressed | compressed |\n| :------: | :----------: | :--------: |\n|  __CSS__ |   [ðŸ”—](https://cdnjs.cloudflare.com/ajax/libs/TableExport/5.0.2/css/tableexport.css)     |  [ðŸ”—](https://cdnjs.cloudflare.com/ajax/libs/TableExport/5.0.2/css/tableexport.min.css)      |\n|  __JS__  |   [ðŸ”—](https://cdnjs.cloudflare.com/ajax/libs/TableExport/5.0.2/js/tableexport.js)     |  [ðŸ”—](https://cdnjs.cloudflare.com/ajax/libs/TableExport/5.0.2/js/tableexport.min.js)      |\n|  __Images__  | &mdash; |   [ðŸ”—<sup>xlsx</sup>](https://cdnjs.cloudflare.com/ajax/libs/TableExport/5.0.2/img/xlsx.svg)[ðŸ”—<sup>xls</sup>](https://cdnjs.cloudflare.com/ajax/libs/TableExport/5.0.2/img/xls.svg)[ðŸ”—<sup>csv</sup>](https://cdnjs.cloudflare.com/ajax/libs/TableExport/5.0.2/img/csv.svg)[ðŸ”—<sup>txt</sup>](https://cdnjs.cloudflare.com/ajax/libs/TableExport/5.0.2/img/txt.svg)  |\n\n\n#### [unpkg](https://unpkg.com/#/)\n|          | uncompressed | compressed |\n| :------: | :----------: | :--------: |\n|  __CSS__ |   [ðŸ”—](https://unpkg.com/tableexport/dist/css/tableexport.css)     |  [ðŸ”—](https://unpkg.com/tableexport/dist/css/tableexport.min.css)      |\n|  __JS__  |   [ðŸ”—](https://unpkg.com/tableexport/dist/js/tableexport.js)     |  [ðŸ”—](https://unpkg.com/tableexport/dist/js/tableexport.min.js)      |\n|  __Images__  | &mdash; |   [ðŸ”—<sup>xlsx</sup>](https://unpkg.com/tableexport/dist/img/xlsx.svg)[ðŸ”—<sup>xls</sup>](https://unpkg.com/tableexport/dist/img/xls.svg)[ðŸ”—<sup>csv</sup>](https://unpkg.com/tableexport/dist/img/csv.svg)[ðŸ”—<sup>txt</sup>](https://unpkg.com/tableexport/dist/img/txt.svg)  |\n\n\n### Dependencies\n\n#### Required:\n\n* [FileSaver.js](https://github.com/clarketm/FileSaver.js/)\n\n#### Optional:\n\n* [jQuery](https://jquery.com) (1.2.1 or higher)\n* [Bootstrap](http://getbootstrap.com/getting-started/#download) (3.1.0 or higher)\n\n#### Add-Ons:\nIn order to provide **Office Open XML SpreadsheetML Format ( `.xlsx` )** support, you must include the following third-party library in your project before both [FileSaver.js](https://github.com/clarketm/FileSaver.js/) and [TableExport](https://tableexport.travismclarke.com).\n\n* [xlsx.core.js](https://github.com/SheetJS/js-xlsx) by _SheetJS_\n\n> Including `xlsx.core.js` is **NOT** necessary if installing with [`Bower`](#install-with-bower) or [`npm`](#install-with-npm)\n\n```html\n<script src=\"xlsx.core.js\"></script>\n<script src=\"FileSaver.js\"></script>\n ...\n<script src=\"tableexport.js\"></script>\n```\n\n#### Older Browsers:\nTo support legacy browsers ( **Chrome** < 20, **Firefox** < 13, **Opera** < 12.10, **IE** < 10, __Safari__ < 6 ) include the [Blob.js](https://github.com/clarketm/Blob.js/) polyfill before the [FileSaver.js](https://github.com/clarketm/FileSaver.js/) script.\n\n* [Blob.js](https://github.com/clarketm/Blob.js) by _eligrey_ (forked by  _clarketm_)\n \n > Including `Blob.js` is **NOT** necessary if installing with [`Bower`](#install-with-bower) or [`npm`](#install-with-npm)\n\n```html\n<script src=\"Blob.js\"></script>\n<script src=\"FileSaver.js\"></script>\n ...\n<script src=\"tableexport.js\"></script>\n```\n\n## Usage\n\n### JavaScript\n\nTo use this library, simple call the [`TableExport`](https://tableexport.travismclarke.com) constructor:\n\n```js\nnew TableExport(document.getElementsByTagName(\"table\"));\n\n// OR simply\n\nTableExport(document.getElementsByTagName(\"table\"));\n\n// OR using jQuery\n\n$(\"table\").tableExport();    \n```\n\nAdditional properties can be passed-in to customize the look and feel of your tables, buttons, and exported data.\n\nNotice that by default, TableExport will create export buttons for three different filetypes *`xls`, `csv`, `txt`*. You can choose which buttons to generate by setting the `formats` property to the filetype(s) of your choice.\n\n```js\n/* Defaults */\nTableExport(document.getElementsByTagName(\"table\"), {\n    headers: true,                              // (Boolean), display table headers (th or td elements) in the <thead>, (default: true)\n    footers: true,                              // (Boolean), display table footers (th or td elements) in the <tfoot>, (default: false)\n    formats: ['xlsx', 'csv', 'txt'],            // (String[]), filetype(s) for the export, (default: ['xlsx', 'csv', 'txt'])\n    filename: 'id',                             // (id, String), filename for the downloaded file, (default: 'id')\n    bootstrap: false,                           // (Boolean), style buttons using bootstrap, (default: true)\n    exportButtons: true,                        // (Boolean), automatically generate the built-in export buttons for each of the specified formats (default: true)\n    position: 'bottom',                         // (top, bottom), position of the caption element relative to table, (default: 'bottom')\n    ignoreRows: null,                           // (Number, Number[]), row indices to exclude from the exported file(s) (default: null)\n    ignoreCols: null,                           // (Number, Number[]), column indices to exclude from the exported file(s) (default: null)\n    trimWhitespace: true                        // (Boolean), remove all leading/trailing newlines, spaces, and tabs from cell text in the exported file(s) (default: false)\n});\n```\n> **Note:**  to use the `xlsx` filetype, you must include [js-xlsx](https://github.com/SheetJS/js-xlsx/blob/master/dist/xlsx.core.min.js); reference the [`Add-Ons`](#add-ons) section.\n\n### Properties\n\n* [`headers`](https://tableexport.v3.travismclarke.com/examples/headers_footers.html)\n* [`footers`](https://tableexport.v3.travismclarke.com/examples/headers_footers.html)\n* [`formats`](https://tableexport.v3.travismclarke.com/examples/formats-xlsx-xls-csv-txt.html)\n* [`filename`](https://tableexport.v3.travismclarke.com/examples/filename.html)\n* [`bootstrap`](https://tableexport.v3.travismclarke.com/examples/bootstrap.html)\n* [`exportButtons`](https://tableexport.v3.travismclarke.com/examples/exportButtons.html)\n* [`position`](https://tableexport.v3.travismclarke.com/examples/position.html)\n* [`ignoreRows`](https://tableexport.v3.travismclarke.com/examples/ignore-row-cols-cells.html)\n* [`ignoreCols`](https://tableexport.v3.travismclarke.com/examples/ignore-row-cols-cells.html)\n* [`trimWhitespace`](https://tableexport.v3.travismclarke.com/examples/whitespace.html)\n\n### Methods\n\nTableExport supports additional methods (**getExportData**, **update**, **reset** and **remove**) to control the [`TableExport`](https://tableexport.travismclarke.com) instance after creation.\n\n```js\n/* First, call the `TableExport` constructor and save the return instance to a variable */\nvar table = TableExport(document.getElementById(\"export-buttons-table\"));\n```\n\n#### [`getExportData`](https://tableexport.v3.travismclarke.com/examples/exportButtons.html)\n```js\n/* get export data */\nvar exportData = table.getExportData();     // useful for creating custom export buttons, i.e. when (exportButtons: false)\n\n/*****************\n ** exportData ***\n *****************\n{\n    \"export-buttons-table\": {\n        xls: {\n            data: \"...\",\n            fileExtension: \".xls\",\n            filename: \"export-buttons-table\",\n            mimeType: \"application/vnd.ms-excel\"\n        },\n        ...\n    }\n};\n*/\n```\n\n#### [`getFileSize`](https://tableexport.v3.travismclarke.com/examples/exportButtons.html)\n```js\nvar tableId = 'export-buttons-table';\nvar XLS = table.CONSTANTS.FORMAT.XLS;\n\n/* get export data (see `getExportData` above) */\nvar exportDataXLS = table.getExportData()[tableId][XLS];\n\n/* get file size (bytes) */\nvar bytesXLS = table.getFileSize(exportDataXLS.data, exportDataXLS.fileExtension);\n\n/**********************************\n ** bytesXLS (file size in bytes)\n **********************************\n352\n*/\n```\n\n#### [`update`](https://tableexport.v3.travismclarke.com/examples/update_reset_remove.html)\n```js\n/* update */\ntable.update({\n    filename: \"newFile\"     // pass in a new set of properties\n});\n```\n\n#### [`reset`](https://tableexport.v3.travismclarke.com/examples/update_reset_remove.html)\n```js\n/* reset */\ntable.reset();             // useful for a dynamically altered table\n```\n\n#### [`remove`](https://tableexport.v3.travismclarke.com/examples/update_reset_remove.html)\n```js\n/* remove */\ntable.remove();            // removes caption and buttons\n```\n\n### Settings\nBelow are some of the popular configurable settings to customize the functionality of the library.\n\n#### [`ignoreCSS`](https://tableexport.v3.travismclarke.com/examples/ignore-row-cols-cells.html)\n```js\n/**\n * CSS selector or selector[] to exclude/remove cells (<td> or <th>) from the exported file(s).\n * @type {selector|selector[]}\n * @memberof TableExport.prototype\n */\n\n// selector\nTableExport.prototype.ignoreCSS = \".tableexport-ignore\";\n\n// selector[]\nTableExport.prototype.ignoreCSS = [\".tableexport-ignore\", \".other-ignore-class\"];\n\n// OR using jQuery\n\n// selector\n$.fn.tableExport.ignoreCSS = \".tableexport-ignore\" ;\n\n// selector[]\n$.fn.tableExport.ignoreCSS = [\".tableexport-ignore\", \".other-ignore-class\"] ;\n```\n\n#### [`emptyCSS`](https://tableexport.v3.travismclarke.com/examples/ignore-row-cols-cells.html)\n```js\n/**\n * CSS selector or selector[] to replace cells (<td> or <th>) with an empty string in the exported file(s).\n * @type {selector|selector[]}\n * @memberof TableExport.prototype\n */\n\n// selector\nTableExport.prototype.emptyCSS = \".tableexport-empty\";\n\n// selector[]\nTableExport.prototype.emptyCSS = [\".tableexport-empty\", \".other-empty-class\"];\n\n// OR using jQuery\n\n// selector\n$.fn.tableExport.emptyCSS = \".tableexport-empty\" ;\n\n// selector[]\n$.fn.tableExport.emptyCSS = [\".tableexport-empty\", \".other-empty-class\"];\n```\n\n```js\n/* default charset encoding (UTF-8) */\nTableExport.prototype.charset = \"charset=utf-8\";\n\n/* default `filename` property if \"id\" attribute is unset */\nTableExport.prototype.defaultFilename = \"myDownload\";\n\n/* default class to style buttons when not using Bootstrap or the built-in export buttons, i.e. when (`bootstrap: false` & `exportButtons: true`)  */\nTableExport.prototype.defaultButton = \"button-default\";\n\n/* Bootstrap classes used to style and position the export button, i.e. when (`bootstrap: true` & `exportButtons: true`) */\nTableExport.prototype.bootstrapConfig = [\"btn\", \"btn-default\", \"btn-toolbar\"];\n\n/* row delimeter used in all filetypes */\nTableExport.prototype.rowDel = \"\\r\\n\";\n```\n\n```js\n/**\n * Format-specific configuration (default class, content, mimeType, etc.)\n * @memberof TableExport.prototype\n */\nformatConfig: {\n    /**\n     * XLSX (Open XML spreadsheet) file extension configuration\n     * @memberof TableExport.prototype\n     */\n    xlsx: {\n        defaultClass: 'xlsx',\n        buttonContent: 'Export to xlsx',\n        mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        fileExtension: '.xlsx'\n    },\n    xlsm: {\n        defaultClass: 'xlsm',\n        buttonContent: 'Export to xlsm',\n        mimeType: 'application/vnd.ms-excel.sheet.macroEnabled.main+xml',\n        fileExtension: '.xlsm'\n    },\n    xlsb: {\n        defaultClass: 'xlsb',\n        buttonContent: 'Export to xlsb',\n        mimeType: 'application/vnd.ms-excel.sheet.binary.macroEnabled.main',\n        fileExtension: '.xlsb'\n    },\n    /**\n     * XLS (Binary spreadsheet) file extension configuration\n     * @memberof TableExport.prototype\n     */\n    xls: {\n        defaultClass: 'xls',\n        buttonContent: 'Export to xls',\n        separator: '\\t',\n        mimeType: 'application/vnd.ms-excel',\n        fileExtension: '.xls',\n        enforceStrictRFC4180: false\n    },\n    /**\n     * CSV (Comma Separated Values) file extension configuration\n     * @memberof TableExport.prototype\n     */\n    csv: {\n        defaultClass: 'csv',\n        buttonContent: 'Export to csv',\n        separator: ',',\n        mimeType: 'text/csv',\n        fileExtension: '.csv',\n        enforceStrictRFC4180: true\n    },\n    /**\n     * TXT (Plain Text) file extension configuration\n     * @memberof TableExport.prototype\n     */\n    txt: {\n        defaultClass: 'txt',\n        buttonContent: 'Export to txt',\n        separator: '  ',\n        mimeType: 'text/plain',\n        fileExtension: '.txt',\n        enforceStrictRFC4180: true\n    }\n},\n\n//////////////////////////////////////////\n// Configuration override example\n//////////////////////////////////////////\n\n/* Change the CSV (Comma Separated Values) `mimeType` to \"application/csv\" */\nTableExport.prototype.formatConfig.xlsx.mimeType = \"application/csv\"\n\n```\n\n### CSS\n\n[TableExport](https://tableexport.travismclarke.com) packages with customized [Bootstrap](http://getbootstrap.com/getting-started/#download) CSS stylesheets to deliver enhanced table and button styling. These styles can be *enabled* by initializing with the `bootstrap` property set to `true`.\n\n```js\nTableExport(document.getElementsByTagName(\"table\"), {\n    bootstrap: true\n});\n```\n\nWhen used alongside Bootstrap, there are four custom classes **`.xlsx`, `.xls`, `.csv`, `.txt`** providing button styling for each of the exportable filetypes.\n\n### Browser Support\n\n|  | Chrome | Firefox | IE  | Opera | Safari |\n| :------: | :------: | :-------: | :---: | :-----: | :------: |\n| __Android__ |    &#10003;   |    &#10003;    | - |   &#10003;   |  -   |\n| __iOS__ |    &#10003;   |  -    | - |   -   |   &#10003;    |\n| **Mac OSX**|    &#10003;   |    &#10003;    | - |   &#10003;  |   &#10003;    |\n| **Windows** |    &#10003;   |    &#10003;    | &#10003; |   &#10003;   |   &#10003;    |\n\n> A full list of [browser support](https://github.com/clarketm/FileSaver.js#supported-browsers) can be found in the [FileSaver.js](https://github.com/clarketm/FileSaver.js) README. Some [legacy browsers](https://github.com/clarketm/FileSaver.js#supported-browsers) may require an additional third-party dependency: [Blob.js](https://github.com/clarketm/Blob.js/)\n\n### Examples\n\n#### Customizing Properties\n* [`headers`](https://tableexport.v3.travismclarke.com/examples/headers_footers.html)\n* [`footers`](https://tableexport.v3.travismclarke.com/examples/headers_footers.html)\n* [`formats`](https://tableexport.v3.travismclarke.com/examples/formats-xlsx-xls-csv-txt.html)\n* [`filename`](https://tableexport.v3.travismclarke.com/examples/filename.html)\n* [`bootstrap`](https://tableexport.v3.travismclarke.com/examples/bootstrap.html)\n* [`exportButtons`](https://tableexport.v3.travismclarke.com/examples/exportButtons.html)\n* [`position`](https://tableexport.v3.travismclarke.com/examples/position.html)\n* [`ignoreRows`](https://tableexport.v3.travismclarke.com/examples/ignore-row-cols-cells.html)\n* [`ignoreCols`](https://tableexport.v3.travismclarke.com/examples/ignore-row-cols-cells.html)\n* [`trimWhitespace`](https://tableexport.v3.travismclarke.com/examples/whitespace.html)\n\n#### Customizing Settings\n* [`ignoreCSS`](https://tableexport.v3.travismclarke.com/examples/ignore-row-cols-cells.html)\n* [`emptyCSS`](https://tableexport.v3.travismclarke.com/examples/ignore-row-cols-cells.html)\n\n#### Miscellaneous\n* [`rowspan`](https://tableexport.v3.travismclarke.com/examples/rowspan-colspan.html)\n* [`colspan`](https://tableexport.v3.travismclarke.com/examples/rowspan-colspan.html)\n* [`cell data types`](https://tableexport.v3.travismclarke.com/examples/cell-data-types.html) (`string`, `number`, `boolean`, `date`)\n* [`emoji`](https://tableexport.v3.travismclarke.com/examples/unicode-emoji.html)\n* [`Arabic`](https://tableexport.v3.travismclarke.com/examples/arabic-language.html)\n\n#### Skeletons \n* [TableExport + RequireJS](https://github.com/clarketm/tableexport_requirejs_app) skeleton.\n* [TableExport + Flask](https://github.com/clarketm/tableexport_flask_app) skeleton.\n* [TableExport + Webpack 1](https://github.com/clarketm/tableexport_webpack-v1_app) skeleton.\n* [TableExport + Angular 4 + Webpack 2](https://github.com/clarketm/tableexport_angular4_webpack2_app) skeleton.\n\n### License\n[TableExport](https://tableexport.travismclarke.com) is licensed under the terms of the [Apache-2.0](http://www.apache.org/licenses/LICENSE-2.0.html) License\n\n### Going Forward\n#### TODOs\n- [x] Update JSDocs and TypScript definition file.\n- [x] Fix bug with **CSV** and **TXT** `ignoreRows` and `ignoreCols` (rows/cols rendered as empty strings rather than being *removed*).\n- [x] Reimplement and test the `update`, `reset`, and `remove` **TableExport** prototype properties without requiring jQuery.\n- [x] Make jQuery as *peer dependency* and ensure proper **TableExport** rendering in browser, AMD, and CommonJS environments.\n- [x] Force jQuery to be an optionally loaded module.\n- [x] Use the enhanced [SheetJS](https://github.com/SheetJS/js-xlsx#supported-output-formats) `xls`, `csv`, and `txt` formats (exposed via `enforceStrictRFC4180` prototype property).\n- [x] Allow `ignoreCSS` and `emptyCSS` to work with any `selector|selector[]` instead of solely a single CSS class.\n- [x] Ensure (via testing) full consistency and backwards-compatibility for jQuery.\n- [ ] Add **Export as PDF** support.\n\n### Credits\nSpecial thanks the the following contributors: \n* [SheetJS](https://github.com/SheetJS) - js-xlsx \n* [Eli Grey](https://github.com/eligrey) - FileSaver.js & Blob.js\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/clarketm/TableExport.git"
  },
  "scripts": {
    "build": "gulp",
    "test": "gulp"
  },
  "style": [
    "dist/css/tableexport.css"
  ],
  "typings": "dist/tableexport.d.ts",
  "version": "5.0.2"
}
